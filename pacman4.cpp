#include <iostream>
#include<Windows.h>
#include<conio.h>
#include <stdio.h>
#include <thread>
#include <stdlib.h>
#define WID 51
#define HEI 66
#define GWID 10
#define GHEI 15
using namespace std;
int o = 0;
int x = 25;
int y = 46;
int gx = 14;
int gy = 2;
// int pacman[32][41] = ;
int zumsu = 0;
int cnt = 0;
int clear[14][43] = { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
{ 0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
{ 0,0,1,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
{ 0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0, },
{ 0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0,0, },
{ 0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0, },
{ 0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0, },
{ 0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0, },
{ 0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0, },
{ 0,0,1,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0, },
{ 0,0,0,0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0, },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, }, };
int maintitle[HEI][WID] = { {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,2,0,2,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,2,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,2,0,0,0,0,0,0,2,0,2,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,2,0,0,0,2,0,0,0,0,2,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,2,2,2,2,2,0,0,0,0,2,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,2,0,0,0,2,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,} };

int map[HEI][WID] = { {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
{1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,},
{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,},
{1,0,1,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,1,0,1,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,1,0,1,},
{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,},
{1,0,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,0,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,0,1,},
{1,0,1,0,2,0,1,0,0,0,0,1,0,2,0,1,0,0,0,0,1,0,2,0,1,0,1,0,2,0,1,0,0,0,0,1,0,2,0,1,0,0,0,0,1,0,2,0,1,0,1,},
{1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,1,},
{1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,1,},
{1,0,1,0,2,0,1,0,0,0,0,1,0,2,0,1,0,0,0,0,1,0,2,0,1,0,1,0,2,0,1,0,0,0,0,1,0,2,0,1,0,0,0,0,1,0,2,0,1,0,1,},
{1,0,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,0,1,},
{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,},
{1,0,1,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,1,0,1,},
{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,},
{1,0,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,0,1,},
{1,0,1,0,2,0,1,0,0,0,0,1,0,2,0,1,0,1,0,2,0,1,0,0,0,0,0,0,0,1,0,2,0,1,0,1,0,2,0,1,0,0,0,0,1,0,2,0,1,0,1,},
{1,0,1,0,0,0,1,1,1,1,1,1,0,0,0,1,0,1,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,1,0,1,0,0,0,1,1,1,1,1,1,0,0,0,1,0,1,},
{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,},
{1,0,1,0,2,0,0,2,0,0,2,0,0,2,0,1,0,1,0,2,0,0,2,0,1,0,1,0,2,0,0,2,0,1,0,1,0,2,0,0,2,0,0,2,0,0,2,0,1,0,1,},
{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,},
{1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,},
{1,0,0,0,0,0,0,0,0,0,0,1,0,2,0,1,0,0,0,0,1,0,2,0,0,2,0,0,2,0,1,0,0,0,0,1,0,2,0,1,0,0,0,0,0,0,0,0,0,0,1,},
{1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,},
{0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,1,0,1,0,2,0,1,0,1,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,1,0,1,0,2,0,1,0,1,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,},
{1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,0,0,0,1,1,1,3,3,3,1,1,1,0,0,0,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,},
{1,0,0,0,0,0,0,0,0,0,0,1,0,2,0,1,0,1,0,2,0,1,0,1,4,0,7,1,0,1,0,2,0,1,0,1,0,2,0,1,0,0,0,0,0,0,0,0,0,0,1,},
{1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,0,1,5,0,6,1,0,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,1,0,0,0,0,0,0,0,1,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,},
{1,0,0,0,0,0,0,0,0,0,0,1,0,2,0,1,0,1,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,1,0,1,0,2,0,1,0,0,0,0,0,0,0,0,0,0,1,},
{1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,},
{0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,1,0,1,0,2,0,1,0,1,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,1,0,1,0,2,0,1,0,1,0,0,0,0,0,0,0,0,0,},
{0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,},
{1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,},
{1,0,0,0,0,0,0,0,0,0,0,1,0,2,0,1,0,1,0,2,0,1,0,0,0,0,0,0,0,1,0,2,0,1,0,1,0,2,0,1,0,0,0,0,0,0,0,0,0,0,1,},
{1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,},
{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,},
{1,0,1,0,2,0,0,2,0,0,2,0,0,2,0,0,0,0,0,2,0,0,0,0,1,0,1,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,1,0,1,},
{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,},
{1,0,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,0,1,},
{1,0,1,0,2,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,2,0,0,2,0,0,2,0,1,0,0,0,0,1,0,2,0,1,0,0,0,0,1,0,2,0,1,0,1,},
{1,0,1,0,0,0,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,0,1,1,1,1,0,0,0,1,0,1,},
{1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,},
{1,0,1,0,2,0,0,2,0,1,0,1,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,1,0,1,0,2,0,0,2,0,1,0,1,},
{1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,},
{1,0,1,1,1,1,0,0,0,1,0,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,0,1,0,0,0,1,1,1,1,0,1,},
{1,0,0,0,0,1,0,2,0,1,0,1,0,2,0,1,0,1,0,2,0,1,0,0,0,0,0,0,0,1,0,2,0,1,0,1,0,2,0,1,0,1,0,2,0,1,0,0,0,0,1,},
{1,0,1,1,1,1,0,0,0,1,1,1,0,0,0,1,0,1,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,1,0,1,0,0,0,1,1,1,0,0,0,1,1,1,1,0,1,},
{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,},
{1,0,1,0,2,0,0,2,0,0,2,0,0,2,0,1,0,1,0,2,0,0,2,0,1,0,1,0,2,0,0,2,0,1,0,1,0,2,0,0,2,0,0,2,0,0,2,0,1,0,1,},
{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,},
{1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,},
{1,0,1,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,2,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,1,0,1,},
{1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,},
{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,},
{1,0,1,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,1,0,1,},
{1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,},
{1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,} };
int way = 0;        // 1 À§ 2 µÚ 3 ¿À¸¥ 4 ¿Þ

int flag = 0;
int colorflag = 0;
enum colorName
{
    BLACK,
    D_BLUE,
    D_GREEN,
    D_SKYBLUE,
    D_RED,
    D_VIOLET,
    D_YELLOW,
    GRAY,
    D_GRAY,
    BLUE,
    GREEN,
    SKYBLUE,
    RED,
    VIOLET,
    YELLOW,
    WHITE,
    mint,
    PINK,
    ORANGE,
};
void CursorView(char show) {
    HANDLE hConsole;
    CONSOLE_CURSOR_INFO ConsoleCursor;

    hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

    ConsoleCursor.bVisible = show;
    ConsoleCursor.dwSize = 1;

    SetConsoleCursorInfo(hConsole, &ConsoleCursor);
}

void goToPoint(int x, int y) {
    COORD Cur;
    Cur.X = x;
    Cur.Y = y;

    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Cur);

}
void drw(int bgColor, int textColor) {

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), bgColor * 16 + textColor);

}

void makepacright() {
    goToPoint(x, y);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x - 1, y);
    drw(YELLOW, YELLOW);
    puts(" ");
    //  goToPoint(x + 1, y);
    //  drw(YELLOW, YELLOW);
    //  puts(" ");
    goToPoint(x, y + 1);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x, y - 1);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x - 1, y - 1);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x - 1, y + 1);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x + 1, y - 1);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x + 1, y + 1);
    drw(YELLOW, YELLOW);
    puts(" ");
}
void makepacleft() {
    goToPoint(x, y);
    drw(YELLOW, YELLOW);
    puts(" ");
    //  goToPoint(x - 1, y);
   //   drw(YELLOW, YELLOW);
   //   puts(" ");
    goToPoint(x + 1, y);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x, y + 1);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x, y - 1);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x - 1, y - 1);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x - 1, y + 1);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x + 1, y - 1);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x + 1, y + 1);
    drw(YELLOW, YELLOW);
    puts(" ");
}
void makepacup() {
    goToPoint(x, y);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x - 1, y);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x + 1, y);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x, y + 1);
    drw(YELLOW, YELLOW);
    puts(" ");
    //  goToPoint(x, y - 1);
   //   drw(YELLOW, YELLOW);
   //   puts(" ");
    goToPoint(x - 1, y - 1);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x - 1, y + 1);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x + 1, y - 1);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x + 1, y + 1);
    drw(YELLOW, YELLOW);
    puts(" ");
}
void makepacdown() {
    goToPoint(x, y);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x - 1, y);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x + 1, y);
    drw(YELLOW, YELLOW);
    puts(" ");
    //   goToPoint(x, y + 1);
     //  drw(YELLOW, YELLOW);
   //    puts(" ");
    goToPoint(x, y - 1);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x - 1, y - 1);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x - 1, y + 1);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x + 1, y - 1);
    drw(YELLOW, YELLOW);
    puts(" ");
    goToPoint(x + 1, y + 1);
    drw(YELLOW, YELLOW);
    puts(" ");
}
void makeblack() {
    goToPoint(x, y);
    drw(BLACK, BLACK);
    puts(" ");
    goToPoint(x - 1, y);
    drw(BLACK, BLACK);
    puts(" ");
    goToPoint(x + 1, y);
    drw(BLACK, BLACK);
    puts(" ");
    goToPoint(x, y + 1);
    drw(BLACK, BLACK);
    puts(" ");
    goToPoint(x, y - 1);
    drw(BLACK, BLACK);
    puts(" ");
    goToPoint(x - 1, y - 1);
    drw(BLACK, BLACK);
    puts(" ");
    goToPoint(x - 1, y + 1);
    drw(BLACK, BLACK);
    puts(" ");
    goToPoint(x + 1, y - 1);
    drw(BLACK, BLACK);
    puts(" ");
    goToPoint(x + 1, y + 1);
    drw(BLACK, BLACK);
    puts(" ");
}
bool check(int x, int y) {
    if (x - 1 == 0 && y == 0) {
        if (x + 1 == 0 && y == 0) {
            if (x == 0 && y + 1 == 0) {
                if (x + 1 == 0 && y + 1 == 0) {
                    if (x + 1 == 0 && y - 1 == 0) {
                        if (x - 1 == 0 && y + 1 == 0) {
                            if (x - 1 == 0 && y - 1 == 0) {
                                if (x == 0 && y - 1 == 0) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else return false;
}
void moveup();
void movedown();
void moveleft();
void moveright();

void moveup() {
    while (1) {
        //           if(key!=87|| key!=115) break;
            //   if (flag == 0) break;
        if (GetAsyncKeyState(VK_DOWN)) {
            if (map[y - 1][x] != 1) {
                movedown();
                break;
            }
        }
        if (GetAsyncKeyState(VK_RIGHT)) {
            if (map[y][x + 1] != 1) {
                moveright();
                break;
            }
        }
        if (GetAsyncKeyState(VK_LEFT)) {
            if (map[y][x - 1] != 1) {
                moveleft();
                break;
            }
        }
        if (map[y - 3][x] == 1) {

            return;
        }
        else if (map[y - 2][x] == 1) {

            return;
        }
        else if (map[y - 3][x] == 2) {
            map[y - 3][x] = 0;
            zumsu++;

        }
        else {

            y -= 3;
            //    goToPoint(x, y);
            makepacup();
            y += 3;
            makeblack();
            y -= 3;
            //   goToPoint(x, y);
            Sleep(160);
        }
        // else flag = 0;
    }
}
void movedown() {
    while (1) {
        //   if(key!=83|| key!=115) break;
        if (GetAsyncKeyState(VK_UP)) {
            if (map[y + 1][x] != 1) {
                moveup();
                break;
            }
        }
        if (GetAsyncKeyState(VK_RIGHT)) {
            if (map[y][x + 1] != 1) {
                moveright();
                break;
            }
        }
        if (GetAsyncKeyState(VK_LEFT)) {
            if (map[y][x - 1] != 1) {
                moveleft();
                break;
            }
        }
        if (map[y + 3][x] == 1) {

            return;
        }
        else if (map[y + 2][x] == 1) {

            return;
        }
        else if (map[y + 3][x] == 2) {
            map[y + 3][x] = 0;
            zumsu++;

        }
        else {

            y += 3;
            makepacdown();
            y -= 3;
            makeblack();
            y += 3;
            //   goToPoint(x, y);
            Sleep(160);
        }
        // else flag = 0;
    }
}
void moveleft() {
    while (1) {
        //          if(key!=65|| key!=97) break;
         //     if (flag == 0) break;
        if (GetAsyncKeyState(VK_UP)) {
            if (map[y + 1][x] != 1) {
                moveup();
                break;
            }
        }
        if (GetAsyncKeyState(VK_RIGHT)) {
            if (map[y][x + 1] != 1) {
                moveright();
                break;
            }
        }
        if (GetAsyncKeyState(VK_DOWN)) {
            if (map[y - 1][x] != 1) {
                movedown();
                break;
            }
        }
        if (y == 31 && x == 1) {
            x = 49;
            //   goToPoint(x, y);
            makepacleft();
            x = 1;
            makeblack();
            x = 49;
            //   goToPoint(x, y);
            Sleep(160);
        }
        else if (map[y][x - 3] == 1) {

            return;
        }
        else if (map[y][x - 2] == 1) {

            return;
        }
        else if (map[y][x - 3] == 2) {
            map[y][x - 3] = 0;
            zumsu++;

        }

        else {

            x -= 3;
            // goToPoint(x, y);
            makepacleft();
            x += 3;
            makeblack();
            x -= 3;
            //  goToPoint(x, y);
            Sleep(160);
        }
        //  else flag = 0;
    }
}
void moveright() {
    while (1) {
        //if(key!=68 || key!=100) break;
      //  if (flag == 0) break;
        if (GetAsyncKeyState(VK_UP)) {
            if (map[y + 1][x] != 1) {
                moveup();
                break;
            }

        }
        if (GetAsyncKeyState(VK_DOWN)) {
            if (map[y - 1][x] != 1) {
                movedown();
                break;
            }
        }
        if (GetAsyncKeyState(VK_LEFT)) {
            if (map[y][x - 1] != 1) {
                moveleft();
                break;
            }
        }
        if (y == 31 && x == 49) {
            x = 1;
            //   goToPoint(x, y);
            makepacright();
            x = 49;
            makeblack();
            x = 1;
            //  goToPoint(x, y);
            Sleep(160);
        }
        else if (map[y][x + 3] == 1) {

            return;
        }
        else if (map[y][x + 2] == 1) {

            return;
        }
        else if (map[y][x + 3] == 2) {
            map[y][x + 3] = 0;
            zumsu++;

        }

        else {

            x += 3;
            //   goToPoint(x, y);
            makepacright();
            x -= 3;
            makeblack();
            x += 3;
            //    goToPoint(x, y);
            Sleep(160);
        }
        // else flag = 0;
    }
}

int main() {
    int i, j;
    system("mode con: cols=70 lines=68");
    CursorView(0);
    system("title pacman");

    for (i = 0; i < HEI; i++) {
        for (j = 0; j < WID; j++) {
            goToPoint(j, i);
            if (maintitle[i][j] == 1) {

                drw(YELLOW, YELLOW);
                puts(" ");

            }
            if (maintitle[i][j] == 2) {
                drw(D_YELLOW, D_YELLOW);
                puts(" ");
            }
        }

        Sleep(20);
    }
    //   printf("press the ENTER!");
    
    while (1) {
        if (GetAsyncKeyState(VK_SPACE)) {
            system("cls");
            o = 1;
        }
        if (o == 1) {
            for (i = 0; i < 100; i++) {
                for (j = 0; j < 100; j++) {
                    goToPoint(j, i);
                    drw(BLACK, BLACK);
                    printf(" ");
                }
            }
            break;
        }
    }


    if (o == 1) {

        for (i = 0; i < HEI; i++) {
            for (j = 0; j < WID; j++) {
                goToPoint(j, i);
                if (map[i][j] == 1) {
                    drw(BLUE, BLUE);
                    printf(" ");

                }
                else if (map[i][j] == 2) {
                    cnt++;
                    drw(D_YELLOW, D_YELLOW);
                    printf(" ");
                }
                else if (map[i][j] == 3) {
                   // cnt++;
                    drw(WHITE, WHITE);
                    printf(" ");
                }
                else if (map[i][j] == 4) {
                  //  cnt++;
                    drw(RED, RED);
                    printf(" ");
                }
                else if (map[i][j] == 5) {
                 //   cnt++;
                    drw(D_SKYBLUE, D_SKYBLUE);
                    printf(" ");
                }
                else if (map[i][j] == 6) {
                  //  cnt++;
                    drw(PINK, PINK);
                    printf(" ");
                }
                else if (map[i][j] == 7) {
                  //  cnt++;
                    drw(ORANGE, ORANGE);
                    printf(" ");
                }
                //printf(" ");
            }
            Sleep(15);
        }
        goToPoint(56, 4);

        makepacright();
        while (1) {
            if (zumsu >= cnt) {
                goToPoint(0, 0);
                for (i = 0; i < 100; i++) {
                    for (j = 0; j < 100; j++) {
                        drw(BLACK, BLACK);
                        printf(" ");
                    }
                }
                for (i = 0; i < 12; i++) {
                    for (j = 0; j < 43; j++) {
                        if (clear[i][j] == 1) {
                            drw(YELLOW, YELLOW);
                            printf(" ");
                            goToPoint(j, i);
                        }
                    }
                }
                i+=3;
                j = 0;
                for (i; i < 50; i++) {
                    for (j; j < 50; j++) {
                        goToPoint(j, i);
                        drw(BLACK, BLACK);
                        printf(" ");
                    }
                }
                exit(0);
            }
            if (GetAsyncKeyState(VK_RIGHT)) moveright();
            if (GetAsyncKeyState(VK_LEFT)) moveleft();
            if (GetAsyncKeyState(VK_UP)) moveup();
            if (GetAsyncKeyState(VK_DOWN)) movedown();

            //   }
        }
        return 0;
    }
}

/*
                if(GetAsyncKeyState(VK_RIGHT) && map[y][x+2] != 1) {
                    moveright();
                }
                if(GetAsyncKeyState(VK_LEFT) && map[y][x-2] != 1) {
                    moveleft();
                }
                if(GetAsyncKeyState(VK_UP)&&map[y+2][x]) {
                        moveup();
                }
                if(GetAsyncKeyState(VK_DOWN) && map[y-2][x]) {
                    movedown();
                }
            */
